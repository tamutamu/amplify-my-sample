import { Amplify, API, Auth, DataStore, withSSRContext } from "aws-amplify";
import { GRAPHQL_AUTH_MODE } from "@aws-amplify/api-graphql";
import "@aws-amplify/ui-react/styles.css";
import awsExports from "../src/aws-exports";
import type { GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Post, PostStatus } from "../src/models";
import { Authenticator } from "@aws-amplify/ui-react";
import { createPost, updatePost } from "../src/graphql/mutations";
import { ModelPostConditionInput } from "../src/API";
import { listPosts } from "../src/graphql/queries";

Amplify.configure(awsExports);

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const SSR = withSSRContext({ req });
  const response = await SSR.API.graphql({ query: listPosts });

  return {
    props: {
      _posts: response.data.listPosts.items,
    },
  };
};

const Home = () => {
  const [posts, setPosts] = useState<Post[]>([]);

  //   useEffect(() => {
  //     fetchMessage();
  //     const subscription = DataStore.observe(Post).subscribe(fetchMessage);
  //     return () => {
  //       subscription.unsubscribe();
  //     };
  //   }, []);

  async function fetchMessage() {
    const data = await DataStore.query(Post);
    setPosts(data);
  }

  const handleCreatePost = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const form = new FormData(event.currentTarget);

    try {
      //   const original = (await DataStore.query(
      //     Post,
      //     "ecbad2ca-c07e-4682-9471-419f3508aacc"
      //   )) as Post;
      //   const result = await DataStore.save(
      //     Post.copyOf(original, (updated) => {
      //       updated.title = `title ${Date.now()}`;
      //     })
      //   );

      const msg = form.get("message") + "update";

      const cond: ModelPostConditionInput = {
        title: { ne: msg },
      };

      const result = await API.graphql({
        authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,
        query: createPost,
        variables: {
          input: {
            id: "1c9fee98-82e6-4ea7-8def-f921e6a261b0",
            title: msg,
            status: PostStatus.DRAFT,
          },
          condition: cond,
        },
      });
      if ("data" in result && result.data) {
        const data = result.data.createPost;
        // setPosts([...posts, data]);
        //   window.location.href = `/posts/${data.createPost!.id}`;
      }
    } catch (e) {
      console.error(e);

      if (e instanceof Error) {
        throw new Error(e.message);
      }
    }
  };

  const allDelete = async () => {
    for (const pp of posts) {
      //   const result = await API.graphql({
      //     authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,
      //     query: deletePost,
      //     variables: {
      //       input: {
      //         id: pp.id,
      //         _version: 1,
      //       },
      //     },
      //   });
    }

    setPosts([]);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Amplify + Next.js</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Authenticator>
        <main className={styles.main}>
          <p className={styles.description}>
            <code className={styles.code}>{posts.length}</code>
            posts
          </p>

          <div className={styles.card}>
            <form onSubmit={handleCreatePost}>
              <fieldset>
                <legend>メッセージ</legend>
                <textarea defaultValue="" name="message" />
              </fieldset>

              <button>投稿する</button>
            </form>
            <button onClick={() => Auth.signOut()}>Sign out</button>
            <button onClick={() => allDelete()}>削除する</button>
          </div>

          <div>
            {posts.map((post) => (
              <span
                // href={`/posts/${post.id}`}
                key={post.id}
              >
                <p>{post.title}</p>
              </span>
            ))}
          </div>
        </main>
      </Authenticator>
    </div>
  );
};

export default Home;
